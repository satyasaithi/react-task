{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","increment","setState","count","state","decrement","className","onClick","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAyDeA,G,wDAhDT,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAMVC,UAAW,WACP,EAAKC,SAAS,CAACC,MAAO,EAAKC,MAAMD,MAAQ,KARzB,EAUpBE,UAAW,WACP,EAAKH,SAAS,CAACC,MAAO,EAAKC,MAAMD,MAAQ,KATzC,EAAKC,MAAM,CACPD,MAAO,GAHK,E,qDAehB,OAGI,yBAAKG,UAAU,aACb,yBAAKA,UAAU,YACb,4BAAQC,QAASC,KAAKP,WAAtB,KACA,4BAAQM,QAASC,KAAKH,WAAtB,MAEA,4BAAKG,KAAKJ,MAAMD,Y,GAxBdM,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c602a028.chunk.js","sourcesContent":["import React, { Component} from \"react\"\nimport \"./App.css\";\n// import Greeting from \"./components/Greeting\";\n// import Logo from \"./logo.svg\";\n// import Welcome from \"./components/Welcome\";\n// import States from \"./components/States\";\n// import Counter from \"./components/Counter\";\n\nclass App extends Component {\n      constructor(props){\n        super(props);\n        this.state={\n            count: 0\n\n        }\n    }\n    increment =()=>{\n        this.setState({count: this.state.count + 1});\n    }\n    decrement =()=>{\n        this.setState({count: this.state.count - 1});\n    }\n    render() {\n        \n        return (\n          // <div className=\"mc\">\n          //   Bobby\n            <div className=\"container\">\n              <div className=\"division\">\n                <button onClick={this.increment}>+</button>\n                <button onClick={this.decrement}>-</button>\n                </div>\n                <h2>{this.state.count}</h2>\n                \n            </div>\n            // </div>\n            \n        )\n}\n  // render() {\n  //   return (\n  //     <div className=\"new\">\n  //       <Greeting name=\"Bobby\" mail=\"bobby@apssdc.info\" />\n  //       <img src={Logo} alt=\"images\" style={{width:\"200px\"}}/>\n  //       <Greeting name=\"prasad\" mail=\"prasad@gmail.com\" />\n  //       <h1>We are creating class Component and Pass the the props</h1>\n  //       <Welcome name=\"Bobby\" college=\"DNR\"></Welcome>\n  //       <Welcome name=\"Prasad\" college=\"dnr college\"></Welcome>\n  //       <p>hai</p>\n  //       <States />\n  //       <Counter />\n\n  //     </div>\n  //   );\n  // }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}